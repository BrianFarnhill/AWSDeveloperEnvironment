{
  "Parameters": {
    "VPCId": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "The VPC to deploy this developer instance to"
    },
    "SubnetId": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "The subnet to deploy this developer instance to"
    },
    "Keyname": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "The keypair to use to SSH to this instance"
    },
    "RubyVersion": {
      "Type": "String",
      "Default": "2.7.0",
      "AllowedValues": [
        "none",
        "2.7.0",
        "2.6.5",
        "2.5.7"
      ],
      "Description": "The version of Ruby to install"
    },
    "NodeVersion": {
      "Type": "String",
      "Default": "v12.15.0",
      "AllowedValues": [
        "none",
        "v12.15.0",
        "v10.19.0",
        "v8.17.0"
      ],
      "Description": "The version of NodeJs to install"
    },
    "PythonVersion": {
      "Type": "String",
      "Default": "3.7.6",
      "AllowedValues": [
        "none",
        "3.7.6",
        "2.7.17"
      ],
      "Description": "The version of Python to install"
    },
    "DotnetVersion": {
      "Type": "String",
      "Default": "3.1",
      "AllowedValues": [
        "none",
        "3.1",
        "3.0",
        "2.2",
        "2.1"
      ],
      "Description": "The version of Dotnet to install"
    },
    "PowershellVersion": {
      "Type": "String",
      "Default": "6.2.4",
      "AllowedValues": [
        "none",
        "6.2.4",
        "6.1.6"
      ],
      "Description": "The version of Dotnet to install"
    },
    "InstanceSize": {
      "Type": "String",
      "Default": "c5.large",
      "AllowedValues": [
        "t3.medium",
        "c5.large",
        "c5.xlarge"
      ],
      "Description": "The size of the EC2 instance"
    },
    "SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmx8664ebsC96584B6F00A464EAD1953AFF4B05118Parameter": {
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
      "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-ebs"
    }
  },
  "Resources": {
    "DevInstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Developer instance connection rules",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all egress",
            "FromPort": -1,
            "IpProtocol": "-1",
            "ToPort": -1
          }
        ],
        "SecurityGroupIngress": [],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-Instance"
                ]
              ]
            }
          }
        ],
        "VpcId": {
          "Ref": "VPCId"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsDeveloperEnvironmentStack/DevInstanceSecurityGroup"
      }
    },
    "RepoShare": {
      "Type": "AWS::EFS::FileSystem",
      "Properties": {
        "FileSystemTags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsDeveloperEnvironmentStack/RepoShare"
      }
    },
    "efsShareSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow connections to EFS from developer instances",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all egress",
            "FromPort": -1,
            "IpProtocol": "-1",
            "ToPort": -1
          }
        ],
        "SecurityGroupIngress": [
          {
            "Description": "Allow NFS access",
            "FromPort": 2049,
            "IpProtocol": "tcp",
            "SourceSecurityGroupId": {
              "Fn::GetAtt": [
                "DevInstanceSecurityGroup",
                "GroupId"
              ]
            },
            "ToPort": 2049
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "-FileShare"
                ]
              ]
            }
          }
        ],
        "VpcId": {
          "Ref": "VPCId"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsDeveloperEnvironmentStack/efsShareSecurityGroup"
      }
    },
    "RepoShareTarget": {
      "Type": "AWS::EFS::MountTarget",
      "Properties": {
        "FileSystemId": {
          "Ref": "RepoShare"
        },
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "efsShareSecurityGroup",
              "GroupId"
            ]
          }
        ],
        "SubnetId": {
          "Ref": "SubnetId"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsDeveloperEnvironmentStack/RepoShareTarget"
      }
    },
    "UserDataFunctionServiceRoleD6D29450": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsDeveloperEnvironmentStack/UserDataFunction/ServiceRole/Resource"
      }
    },
    "UserDataFunction1C09A9EE": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "var response = require('cfn-response')\n\nfunction postResponse(Event, Context, Status, Data) {\n    return new Promise(() => {\n        setTimeout(() => response.send(Event, Context, Status, Data), 5000)\n    })\n}\n\nexports.handler = async (ev, ctx) => {\n    if (ev.ResourceProperties.VERSION && ev.ResourceProperties.VERSION !== 'none') {\n        await postResponse(ev, ctx, response.SUCCESS, {userData: ev.ResourceProperties.SCRIPT})\n    } else {\n        await postResponse(ev, ctx, response.SUCCESS, {userData: ''})\n    }    \n}\n"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "UserDataFunctionServiceRoleD6D29450",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Description": "Generates sections of user data strings for developer environment builds",
        "MemorySize": 128,
        "Timeout": 6
      },
      "DependsOn": [
        "UserDataFunctionServiceRoleD6D29450"
      ],
      "Metadata": {
        "aws:cdk:path": "AwsDeveloperEnvironmentStack/UserDataFunction/Resource"
      }
    },
    "BuildUserDataBaseInstall": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "UserDataFunction1C09A9EE",
            "Arn"
          ]
        },
        "VERSION": "1",
        "SCRIPT": {
          "Fn::Join": [
            "",
            [
              "#!/bin/bash\nyum update -y\nyum install zsh openssl-devel amazon-efs-utils nfs-utils -y\nyum group install \"Development Tools\" -y\namazon-linux-extras install docker\nsystemctl enable docker\nservice docker start\nusermod -a -G docker ec2-user\ncd /home/ec2-user\nsudo -u ec2-user sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\nsudo -u ec2-user git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-/home/ec2-user/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\nsudo -u ec2-user git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-/home/ec2-user/.oh-my-zsh/custom}/plugins/zsh-autosuggestions      \nusermod -s /usr/bin/zsh ec2-user\nrm /home/ec2-user/.zshrc\nsudo -u ec2-user cat <<EOT >> /home/ec2-user/.zshrc\nexport ZSH=\"/home/ec2-user/.oh-my-zsh\"\nZSH_THEME=\"agnoster\"\nplugins=(\n    git\n    aws\n    git-extras\n    pip\n    python\n    zsh-syntax-highlighting\n    encode64\n    jsontools\n    node\n    npm\n    urltools\n    zsh-autosuggestions\n)\nsource /home/ec2-user/.oh-my-zsh/oh-my-zsh.sh\nexport CDK_DEFAULT_ACCOUNT=",
              {
                "Ref": "AWS::AccountId"
              },
              "\nexport CDK_DEFAULT_REGION=",
              {
                "Ref": "AWS::Region"
              },
              "\nEOT\nsudo -u ec2-user sh -c \"$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)\"\nsudo -u ec2-user echo 'eval \"$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)\"' >> /home/ec2-user/.zshrc\nsudo -u ec2-user /home/linuxbrew/.linuxbrew/bin/brew tap aws/tap\nsudo -u ec2-user /home/linuxbrew/.linuxbrew/bin/brew install aws-sam-cli\n"
            ]
          ]
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "AwsDeveloperEnvironmentStack/BuildUserData-BaseInstall/Default"
      }
    },
    "BuildUserDataRubyInstall": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "UserDataFunction1C09A9EE",
            "Arn"
          ]
        },
        "VERSION": {
          "Ref": "RubyVersion"
        },
        "SCRIPT": {
          "Fn::Join": [
            "",
            [
              "\nsudo -u ec2-user git clone https://github.com/rbenv/rbenv.git /home/ec2-user/.rbenv\nsudo -u ec2-user echo 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' >> /home/ec2-user/.zshrc\nsudo -u ec2-user mkdir \"$(/home/ec2-user/.rbenv/bin/rbenv root)\"/plugins\nsudo -u ec2-user git clone https://github.com/rbenv/ruby-build.git \"$(sudo -u ec2-user /home/ec2-user/.rbenv/bin/rbenv root)\"/plugins/ruby-build\nsudo -u ec2-user ./.rbenv/bin/rbenv install ",
              {
                "Ref": "RubyVersion"
              },
              "\nsudo -u ec2-user ./.rbenv/bin/rbenv global ",
              {
                "Ref": "RubyVersion"
              },
              "\nsudo -u ec2-user echo 'eval \"$(rbenv init -)\"' >> /home/ec2-user/.zshrc\n\n"
            ]
          ]
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "AwsDeveloperEnvironmentStack/BuildUserData-RubyInstall/Default"
      }
    },
    "BuildUserDataNodeInstall": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "UserDataFunction1C09A9EE",
            "Arn"
          ]
        },
        "VERSION": {
          "Ref": "NodeVersion"
        },
        "SCRIPT": {
          "Fn::Join": [
            "",
            [
              "\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | sudo -u ec2-user bash\nsudo -u ec2-user echo 'export NVM_DIR=\"$HOME/.nvm\"' >> /home/ec2-user/.zshrc\nsudo -u ec2-user echo '[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"' >> /home/ec2-user/.zshrc\nsudo -u ec2-user echo '[ -s \"$NVM_DIR/bash_completion\" ] && . \"$NVM_DIR/bash_completion\"' >> /home/ec2-user/.zshrc\n. /home/ec2-user/.nvm/nvm.sh\nnvm install ",
              {
                "Ref": "NodeVersion"
              },
              "\n\n"
            ]
          ]
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "AwsDeveloperEnvironmentStack/BuildUserData-NodeInstall/Default"
      }
    },
    "BuildUserDataPythonInstall": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "UserDataFunction1C09A9EE",
            "Arn"
          ]
        },
        "VERSION": {
          "Ref": "PythonVersion"
        },
        "SCRIPT": {
          "Fn::Join": [
            "",
            [
              "\nsudo -u ec2-user git clone https://github.com/pyenv/pyenv.git /home/ec2-user/.pyenv\nsudo -u ec2-user /home/ec2-user/.pyenv/bin/pyenv install ",
              {
                "Ref": "PythonVersion"
              },
              "\nsudo -u ec2-user /home/ec2-user/.pyenv/bin/pyenv global ",
              {
                "Ref": "PythonVersion"
              },
              "\nsudo -u ec2-user echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' >> /home/ec2-user/.zshrc\nsudo -u ec2-user echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> /home/ec2-user/.zshrc\nsudo -u ec2-user echo -e 'if command -v pyenv 1>/dev/null 2>&1; then\\n  eval \"$(pyenv init -)\"\\nfi' >> /home/ec2-user/.zshrc\n\n"
            ]
          ]
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "AwsDeveloperEnvironmentStack/BuildUserData-PythonInstall/Default"
      }
    },
    "BuildUserDataDotnetInstall": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "UserDataFunction1C09A9EE",
            "Arn"
          ]
        },
        "VERSION": {
          "Ref": "DotnetVersion"
        },
        "SCRIPT": {
          "Fn::Join": [
            "",
            [
              "\nrpm -Uvh https://packages.microsoft.com/config/centos/7/packages-microsoft-prod.rpm\nyum install dotnet-sdk-",
              {
                "Ref": "DotnetVersion"
              },
              " -y\nyum install aspnetcore-runtime-",
              {
                "Ref": "DotnetVersion"
              },
              " -y\n          \n"
            ]
          ]
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "AwsDeveloperEnvironmentStack/BuildUserData-DotnetInstall/Default"
      }
    },
    "BuildUserDataPowershellInstall": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "UserDataFunction1C09A9EE",
            "Arn"
          ]
        },
        "VERSION": {
          "Ref": "PowershellVersion"
        },
        "SCRIPT": {
          "Fn::Join": [
            "",
            [
              "\nwget https://raw.githubusercontent.com/PowerShell/PowerShell/master/docker/InstallTarballPackage.sh\nchmod +x InstallTarballPackage.sh\n./InstallTarballPackage.sh ",
              {
                "Ref": "PowershellVersion"
              },
              " powershell-",
              {
                "Ref": "PowershellVersion"
              },
              "-linux-x64.tar.gz\n          \n"
            ]
          ]
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "AwsDeveloperEnvironmentStack/BuildUserData-PowershellInstall/Default"
      }
    },
    "BuildUserDataEfsInstall": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "UserDataFunction1C09A9EE",
            "Arn"
          ]
        },
        "VERSION": "`",
        "SCRIPT": {
          "Fn::Join": [
            "",
            [
              "\nsudo -u ec2-user mkdir /home/ec2-user/repos\necho '",
              {
                "Ref": "RepoShare"
              },
              ".efs.",
              {
                "Ref": "AWS::Region"
              },
              ".amazonaws.com:/  /home/ec2-user/repos    nfs     nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport     0       0' >> /etc/fstab\nmount -t nfs -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport ",
              {
                "Ref": "RepoShare"
              },
              ".efs.",
              {
                "Ref": "AWS::Region"
              },
              ".amazonaws.com:/ /home/ec2-user/repos\nchown ec2-user /home/ec2-user/repos\n   \n"
            ]
          ]
        }
      },
      "UpdateReplacePolicy": "Delete",
      "DeletionPolicy": "Delete",
      "Metadata": {
        "aws:cdk:path": "AwsDeveloperEnvironmentStack/BuildUserData-EfsInstall/Default"
      }
    },
    "DevInstanceRole1E2936A8": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": {
                  "Fn::Join": [
                    "",
                    [
                      "ec2.",
                      {
                        "Ref": "AWS::URLSuffix"
                      }
                    ]
                  ]
                }
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "*",
                  "Effect": "Allow",
                  "Resource": "*"
                }
              ],
              "Version": "2012-10-17"
            },
            "PolicyName": "AdminProfile"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsDeveloperEnvironmentStack/DevInstanceRole/Resource"
      }
    },
    "DevInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "DevInstanceRole1E2936A8"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsDeveloperEnvironmentStack/DevInstanceProfile"
      }
    },
    "DevInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "IamInstanceProfile": {
          "Ref": "DevInstanceProfile"
        },
        "ImageId": {
          "Ref": "SsmParameterValueawsserviceamiamazonlinuxlatestamzn2amihvmx8664ebsC96584B6F00A464EAD1953AFF4B05118Parameter"
        },
        "InstanceType": {
          "Ref": "InstanceSize"
        },
        "KeyName": {
          "Ref": "Keyname"
        },
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "DevInstanceSecurityGroup",
              "GroupId"
            ]
          }
        ],
        "SubnetId": {
          "Ref": "SubnetId"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "AWS::StackName"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "\n",
                {
                  "Fn::GetAtt": [
                    "BuildUserDataBaseInstall",
                    "userData"
                  ]
                },
                "\n",
                {
                  "Fn::GetAtt": [
                    "BuildUserDataRubyInstall",
                    "userData"
                  ]
                },
                "\n",
                {
                  "Fn::GetAtt": [
                    "BuildUserDataNodeInstall",
                    "userData"
                  ]
                },
                "\n",
                {
                  "Fn::GetAtt": [
                    "BuildUserDataPythonInstall",
                    "userData"
                  ]
                },
                "\n",
                {
                  "Fn::GetAtt": [
                    "BuildUserDataDotnetInstall",
                    "userData"
                  ]
                },
                "\n",
                {
                  "Fn::GetAtt": [
                    "BuildUserDataPowershellInstall",
                    "userData"
                  ]
                },
                "\n",
                {
                  "Fn::GetAtt": [
                    "BuildUserDataEfsInstall",
                    "userData"
                  ]
                },
                "\n/opt/aws/bin/cfn-signal -e $? --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " --resource DevInstance --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\nreboot\n"
              ]
            ]
          }
        }
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT30M"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsDeveloperEnvironmentStack/DevInstance"
      }
    },
    "PowerOffFunctionServiceRole217F13D3": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
              ]
            ]
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsDeveloperEnvironmentStack/PowerOffFunction/ServiceRole/Resource"
      }
    },
    "PowerOffFunctionServiceRoleDefaultPolicy92398B86": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ec2:StopInstances",
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:ec2:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":instance/",
                    {
                      "Ref": "DevInstance"
                    }
                  ]
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "PowerOffFunctionServiceRoleDefaultPolicy92398B86",
        "Roles": [
          {
            "Ref": "PowerOffFunctionServiceRole217F13D3"
          }
        ]
      },
      "Metadata": {
        "aws:cdk:path": "AwsDeveloperEnvironmentStack/PowerOffFunction/ServiceRole/DefaultPolicy/Resource"
      }
    },
    "PowerOffFunctionA979851C": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": "const AWS = require('aws-sdk')\nconst ec2 = new AWS.EC2()\n\nexports.handler = async (EventObject, ContextObject) => {\n    console.log(EventObject)\n\n    await ec2.stopInstances({\n        InstanceIds: [\n            process.env.INSTANCE_ID\n        ]\n    }).promise()\n}\n"
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "PowerOffFunctionServiceRole217F13D3",
            "Arn"
          ]
        },
        "Runtime": "nodejs12.x",
        "Description": {
          "Fn::Join": [
            "",
            [
              "Powers off the ",
              {
                "Ref": "AWS::StackName"
              },
              " developer environment"
            ]
          ]
        },
        "Environment": {
          "Variables": {
            "INSTANCE_ID": {
              "Ref": "DevInstance"
            }
          }
        },
        "MemorySize": 128,
        "Timeout": 5
      },
      "DependsOn": [
        "PowerOffFunctionServiceRoleDefaultPolicy92398B86",
        "PowerOffFunctionServiceRole217F13D3"
      ],
      "Metadata": {
        "aws:cdk:path": "AwsDeveloperEnvironmentStack/PowerOffFunction/Resource"
      }
    },
    "PowerOffFunctionAllowInvokeAwsDeveloperEnvironmentStackPowerOffTopicCEB4AAAC80AA3A19": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "PowerOffFunctionA979851C",
            "Arn"
          ]
        },
        "Principal": "sns.amazonaws.com",
        "SourceArn": {
          "Ref": "PowerOffTopicD971F974"
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsDeveloperEnvironmentStack/PowerOffFunction/AllowInvoke:AwsDeveloperEnvironmentStackPowerOffTopicCEB4AAAC"
      }
    },
    "PowerOffFunctionPowerOffTopicD6C70285": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "Protocol": "lambda",
        "TopicArn": {
          "Ref": "PowerOffTopicD971F974"
        },
        "Endpoint": {
          "Fn::GetAtt": [
            "PowerOffFunctionA979851C",
            "Arn"
          ]
        }
      },
      "Metadata": {
        "aws:cdk:path": "AwsDeveloperEnvironmentStack/PowerOffFunction/PowerOffTopic/Resource"
      }
    },
    "PowerOffTopicD971F974": {
      "Type": "AWS::SNS::Topic",
      "Metadata": {
        "aws:cdk:path": "AwsDeveloperEnvironmentStack/PowerOffTopic/Resource"
      }
    },
    "NetworkInactiveAlarm": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "ComparisonOperator": "LessThanThreshold",
        "EvaluationPeriods": 1,
        "AlarmActions": [
          {
            "Ref": "PowerOffTopicD971F974"
          }
        ],
        "AlarmName": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "AWS::StackName"
              },
              "-TrafficInactive"
            ]
          ]
        },
        "Dimensions": [
          {
            "Name": "InstanceId",
            "Value": {
              "Ref": "DevInstance"
            }
          }
        ],
        "MetricName": "NetworkOut",
        "Namespace": "AWS/EC2",
        "Period": 3600,
        "Statistic": "Sum",
        "Threshold": 1500000,
        "TreatMissingData": "breaching"
      },
      "Metadata": {
        "aws:cdk:path": "AwsDeveloperEnvironmentStack/NetworkInactiveAlarm"
      }
    }
  }
}